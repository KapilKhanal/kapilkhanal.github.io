---
title: "Enhancing the Boundary Element Method with Scientific Machine Learning"
subtitle: "A Hybrid Approach for Solving Diffraction-Radiation Problems"
author: "Kapil Khanal"
date: "2024-07-30"
image: "nn.png"
categories: [research, machine learning, hydrodynamics, Julia]
tags: [BEM, neural networks, PINNs, scientific machine learning, computational physics]
---

## Introduction

The Boundary Element Method (BEM) is a cornerstone of computational hydrodynamics, widely used to solve the three-dimensional diffraction-radiation problem for floating bodies. BEM involves transforming a partial differential equation (PDE) into a boundary integral equation using Green's theorem, which is then solved numerically. A key challenge in BEM is the numerical evaluation of the Green's function, particularly its wave-related terms. These computations typically scale poorly, often at $O(N^3)$ with the number of panels ($N$), creating a significant bottleneck. This is especially problematic in large-scale optimization tasks for offshore structures, which involve many panels and design parameters.

This creates a classic trade-off: **accuracy vs. efficiency**. We propose adding a third dimension to this trade-off: **the ease of numerical differentiation**. While surrogate models and semi-analytical methods exist, we introduce a hybrid approach that leverages a **physics-informed neural network (PINN)** to enhance the traditional BEM program.

## Neural Networks in Scientific Machine Learning

Neural networks have a growing history in scientific machine learning, with recent publications demonstrating their power in hydrodynamics \cite{HUANG202235, ZHAN2023}. However, a well-known challenge is that standard neural networks often struggle to learn periodic and oscillatory functions, which are fundamental to wave physics.

Several research avenues have explored solutions to this, including:
-   Transforming data into the Fourier space.
-   Developing novel activation functions.
-   Using deeper network architectures.

We're exploring the use of neural networks to approximate the Green's function and integrate it into our in-house BEM solver - [MarineHydro.jl](https://github.com/symbiotic-engineering/MarineHydro.jl).

**This is a work in progress.**

<!-- ## Model Architecture

We use a fully connected neural network with a `[2, 30, 30, 30, 30, 30, 30, 30, 1]` architecture (input, hidden layers, output). While deeper networks can improve generalization, they also increase inference time, creating a trade-off between model performance and speed.


![Neural Network Architecture](nn.png)

To better capture the oscillatory nature of the problem, we adopt two specialized activation functions:
1.  **Trainable Rational Activation Function**: Used for most hidden layers.
2.  **Oscillatory Activation Function**: $x + \sin^2(x)$, used for the final hidden layer.

Computational experiments suggest this combination yields the best performance. The rational activation function is defined as:

$$
F(x) = \frac{\sum_{i=0}^{r_p}a_i x^i}{\sum_{j=0}^{r_q}b_j x^j}, \quad a_{r_p} \neq 0, b_{r_q} \neq 0
$$

This neural network-based global approximation aims to be as fast as older, less accurate methods (like Wu et al.'s approximation) while being as accurate as more modern, computationally intensive ones (like Newman's derivation), all while generalizing well to domains outside the training data.

## Loss Function: A Physics-Informed Approach

A key to successfully training a network on a physical problem is to inform it about the underlying physics. Since the terms of the Green's function satisfy the Laplace equation, we can build this constraint directly into the loss function. Specifically, we enforce the following condition:

$$
\nabla^2 F = \frac{1}{X} \frac{\partial F}{\partial X}  + \frac{\partial^2 F}{\partial Y^2} + \frac{\partial^2 F}{\partial X^2} = 0
$$ -->

<!-- Our loss function penalizes not only incorrect predicted values but also **incorrect gradients**. We use automatic differentiation to compute the gradients of the network's output with respect to its inputs ($\nabla_X \hat{NN}, \nabla_Y \hat{NN}$) and include a term in the loss that pushes these gradients to satisfy the Laplace equation. This ensures the model learns solutions that are not just accurate but also physically consistent. -->

---
### References
- John, F. (1950). On the motion of floating bodies II. *Communications on Pure and Applied Mathematics*.
- Xie, M., et al. (2018). A review of Green's functions for marine hydrodynamics. *Journal of Hydrodynamics*.
- Huang, G., et al. (2022). Deep-learning-based fast-prediction method for hydrodynamic performance of a ship sailing in waves. *Ocean Engineering*.
- Zhan, S., et al. (2023). A review of deep learning in naval architecture and ocean engineering. *Ocean Engineering*.
- Boulle, N., et al. (2020). Rational neural networks. *arXiv preprint*. 