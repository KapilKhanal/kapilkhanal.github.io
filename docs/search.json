[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "What’s New & Updated",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nQuarto Academic Website Examples and Tips\n\n\n\n\n\n\nnews\n\n\n\nExamples and tips for Quarto Academic Website\n\n\n\n\n\nOct 15, 2024\n\n\nDr. Gang He\n\n\n\n\n\n\n\n\n\n\n\n\nGradient-Based Optimization for Large Systems\n\n\nA Deep Dive into MDO Architectures, Solvers, and Simulators\n\n\n\nMDO\n\noptimization\n\nresearch\n\n\n\n\n\n\n\n\n\nJul 26, 2024\n\n\nKapil Khanal\n\n\n\n\n\n\n\n\n\n\n\n\nA Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems\n\n\nMy PhD Research Proposal\n\n\n\nresearch\n\noptimization\n\nhydrodynamics\n\nthesis\n\n\n\nDeveloping a differentiable boundary element method solver for hydrodynamic shape optimization of offshore structures using automatic differentiation and adjoint methods\n\n\n\n\n\nJan 15, 2024\n\n\nKapil Khanal\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Notes: * corresponding author; GS graduate student advisee; VS visiting scholar;  ESI Highly Cited Paper (top 1%);  ESI Hot Paper (top 0.1%)\nTotal citations as of January 2025:"
  },
  {
    "objectID": "publications.html#selected-work",
    "href": "publications.html#selected-work",
    "title": "Publications",
    "section": "Selected Work",
    "text": "Selected Work\nEinstein, A., Podolsky, B., & Rosen, N. (1935). Can quantum-mechanical description of physical reality be considered complete?. Physical review, 47(10), 777. [pdf] [code and data]   \n\n\n\n\n\n\nEinstein, A. (1965). Concerning an heuristic point of view toward the emission and transformation of light. American Journal of Physics, 33(5), 367. [pdf]"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n      Default\n      \n      \n      \n        Title\n      \n      \n        Team\n      \n      \n        Funder\n      \n      \n        Description\n      \n      \n        Start\n      \n      \n        End\n      \n      \n        Funding\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n \n\n\n\nTitle\n\n\n\nTeam\n\n\n\nFunder\n\n\n\nDescription\n\n\n\nFunding\n\n\n\nStart\n\n\n\nEnd\n\n\n\n\n\n\n\n\n\n\n\nExploring \n\n\nAcademic Website\n\n\nFunder\n\n\nThe goal of this project is to investigate .\n\n\n$0\n\n\n2024\n\n\n2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/news-title/index.html",
    "href": "posts/news-title/index.html",
    "title": "News item",
    "section": "",
    "text": "About the news"
  },
  {
    "objectID": "posts/news-title/index.html#summary",
    "href": "posts/news-title/index.html#summary",
    "title": "News item",
    "section": "",
    "text": "About the news"
  },
  {
    "objectID": "posts/paper-title/index.html#abstract",
    "href": "posts/paper-title/index.html#abstract",
    "title": "Can quantum-mechanical description of physical reality be considered complete?",
    "section": "Abstract",
    "text": "Abstract\nIn a complete theory there is an element corresponding to each element of reality. A sufficient condition for the reality of a physical quantity is the possibility of predicting it with certainty, without disturbing the system. In quantum mechanics in the case of two physical quantities described by non-commuting operators, the knowledge of one precludes the knowledge of the other. Then either (1) the description of reality given by the wave function in quantum mechanics is not complete or (2) these two quantities cannot have simultaneous reality. Consideration of the problem of making predictions concerning a system on the basis of measurements made on another system that had previously interacted with it leads to the result that if (1) is false then (2) is also false. One is thus led to conclude that the description of reality as given by a wave function is not complete."
  },
  {
    "objectID": "posts/paper-title/index.html#links",
    "href": "posts/paper-title/index.html#links",
    "title": "Can quantum-mechanical description of physical reality be considered complete?",
    "section": "Links",
    "text": "Links\nPublished paper"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Image: CorPower Ocean\n\n\nCourse: Multidisciplinary Design Optimization\nInstitution: Cornell University\nRole: Teaching Assistant\nWhen Offered: Fall Semester\nPrerequisites: Undergraduate linear algebra and knowledge of MATLAB, Python, or R\nCourse Overview: This course presents a rigorous, quantitative multidisciplinary design methodology that incorporates the creative side of the design process. Through a topic of your choice, students learn how to use multidisciplinary design optimization (MDO) to create advanced and complex engineering systems that must be competitive in performance and life-cycle value.\nKey Focus Areas: - Multidisciplinary character of engineering systems - Design of complex systems\n- Tools for optimization\nCourse Structure: Students work in small teams on a term project to apply MDO principles to design and optimize an engineering system of their choice.\n\n\n\n\nStudents who successfully complete this course will be able to:\n\nSystem Decomposition: Subdivide a complex system into smaller disciplinary models, manage their interfaces and reintegrate them into an overall system model.\nAlgorithm Selection: Identify the most suitable optimization algorithm between gradient-based numerical optimization algorithms (i.e., sequential quadratic programming (SQP)) and various modern heuristic optimization techniques (i.e., simulated annealing (SA) or genetic algorithms (GA)) for their design problem and use it to find the optimal design for a single objective of their choice.\nCritical Analysis: Critically evaluate and interpret analysis and optimization results, including sensitivity analysis and exploration of performance, cost and risk tradeoffs.\nMulti-Objective Optimization: Utilize basic concepts of multi-objective optimization, including the conditions for optimality and Pareto front computation techniques, to optimize their design with respect to two objectives of their choice.\nTeam Project: Work as a team to formulate a realistic engineering design problem, optimize the design for a single objective and multiple competing objectives, and present the results in a final oral presentation and written report.\n\n\n\n\nThis course is fundamentally different from most traditional university optimization courses which focus mainly on the mathematics and algorithms for search. The focus is equally strong on all three aspects of the problem:\n\nMultidisciplinary Integration: Understanding how different disciplines (structures, aerodynamics, controls, optics, costing, manufacturing, environmental science, marketing, etc.) must be tightly coupled during conceptual and preliminary design of complex new systems and products.\nSystem Design: Developing the ability to design complex engineering systems that are competitive in performance and life-cycle value.\nOptimization Tools: Mastering both gradient-based and heuristic optimization techniques for real-world engineering applications.\n\n\n\n\n\nProgramming: MATLAB, Python, or R for implementation\nOptimization Algorithms:\n\nGradient-based methods (Sequential Quadratic Programming)\nHeuristic methods (Simulated Annealing, Genetic Algorithms)\n\nMulti-objective Optimization: Pareto front computation and analysis\nSensitivity Analysis: Understanding design parameter impacts\nSystem Integration: Managing multidisciplinary model couplings\n\n\nThis course provides students with practical experience in applying MDO principles to real engineering problems, preparing them for careers in advanced engineering design and optimization."
  },
  {
    "objectID": "teaching.html#class-1",
    "href": "teaching.html#class-1",
    "title": "Teaching",
    "section": "Class 1",
    "text": "Class 1\n\n\n\n\n\nFall 2024,   Fall 2023\nClass 1 introduction."
  },
  {
    "objectID": "teaching.html#class-2",
    "href": "teaching.html#class-2",
    "title": "Teaching",
    "section": "Class 2",
    "text": "Class 2\n\n\n\n\n\nSpring 2025,   Fall 2023\nClass 2 introduction."
  },
  {
    "objectID": "teaching.html#class-3",
    "href": "teaching.html#class-3",
    "title": "Teaching",
    "section": "Class 3",
    "text": "Class 3\n\n\n\n\n\nSpring 2025,   Spring 2024\nClass 3 introduction."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Quarto Academic\nSchool\nCollege\nUniversity\nAddress:\nPhone:\nE-mail:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kapil Khanal, PhD Candidate",
    "section": "",
    "text": "Lab\n  \n  \n    \n     Uprofile\n  \n  \n    \n     E-mail\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     YouTube\n  \n  \n      ORCID\n  \n  \n      Web of Science\n  \n  \n      Scopus\n  \n  \n      Google Scholar\n  \n\n  \n  \nAbout Me\nI am a doctoral candidate at Cornell University, specializing in systems design, engineering, and optimization. My work focuses on leveraging computational modeling, optimization, simulatios and interdisciplinary approaches to advance sustainable technologies. As a member of the Symbiotic Engineering and Analysis (SEA) Lab, I collaborate on developing innovative solutions for offshore systems.\nWith a Master’s degree in Systems Engineering and ongoing PhD work, I aim to bridge theory and applications for large scale systems.\n\n\nHighlights of my experience include:\n- Researcher and PhD Candidate: Advancing knowledge in multidisciplinary design optimization (MDO) and computational hydrodynamics.\n- Graduate Internships: At Sandia National Laboratories, I worked on differentiable hydrodynamics using Julia for PDE-constrained optimization.\n- Teaching Assistant: Supported the MDO course at Cornell, focusing on integrating creativity and rigorous optimization methodologies to design complex engineering systems.\n- ATPESC Trainee: Selected for the prestigious Argonne Training Program on Extreme-Scale Computing, where I honed skills in cutting-edge computational science.\n- Industry Experience: As a data analyst at Fastenal, I developed quantitative models to drive business decisions.\n\n\n\n\nSystems, PhD Candidate, Cornell University\nSystems Engineering, MS, Cornell University\nMathematics and Data Science, BS, Winona State University"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Kapil Khanal, PhD Candidate",
    "section": "",
    "text": "Highlights of my experience include:\n- Researcher and PhD Candidate: Advancing knowledge in multidisciplinary design optimization (MDO) and computational hydrodynamics.\n- Graduate Internships: At Sandia National Laboratories, I worked on differentiable hydrodynamics using Julia for PDE-constrained optimization.\n- Teaching Assistant: Supported the MDO course at Cornell, focusing on integrating creativity and rigorous optimization methodologies to design complex engineering systems.\n- ATPESC Trainee: Selected for the prestigious Argonne Training Program on Extreme-Scale Computing, where I honed skills in cutting-edge computational science.\n- Industry Experience: As a data analyst at Fastenal, I developed quantitative models to drive business decisions."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Kapil Khanal, PhD Candidate",
    "section": "",
    "text": "Systems, PhD Candidate, Cornell University\nSystems Engineering, MS, Cornell University\nMathematics and Data Science, BS, Winona State University"
  },
  {
    "objectID": "index.html#recent-posts",
    "href": "index.html#recent-posts",
    "title": "Kapil Khanal, PhD Candidate",
    "section": "Recent Posts",
    "text": "Recent Posts\nCheck out the latest  Papers ,  News ,  Events , and  More »\n\n\n\n\n\n\n\n\n\n\nQuarto Academic Website Examples and Tips\n\n\n\nOct 15, 2024\n\n\n\n\n\n\n\n\n\n\n\nGradient-Based Optimization for Large Systems\n\n\nA Deep Dive into MDO Architectures, Solvers, and Simulators\n\n\n\nJul 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems\n\n\nMy PhD Research Proposal\n\n\n\nJan 15, 2024\n\n\n\n\n\n\nNo matching items\n\n\nAll Posts »"
  },
  {
    "objectID": "people.html",
    "href": "people.html",
    "title": "People",
    "section": "",
    "text": "PhD Candidate\n\n\n\n\n\n\n\n\n\n\n\n\n\nPI\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "people.html#team",
    "href": "people.html#team",
    "title": "People",
    "section": "",
    "text": "PhD Candidate\n\n\n\n\n\n\n\n\n\n\n\n\n\nPI\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "people.html#alumni",
    "href": "people.html#alumni",
    "title": "People",
    "section": "Alumni",
    "text": "Alumni\n\n\n   \n    \n    \n      Order By\n      Default\n      \n      \n      \n        Name\n      \n      \n        Role\n      \n      \n        Started\n      \n      \n        Ended\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n \n\n\n\nName\n\n\n\nRole\n\n\n\nStarted\n\n\n\nEnded\n\n\n\n\n\n\n\n\n\n\n\nKapil\n\n\nPhD Candidate\n\n\n2021\n\n\n*\n\n\n\n\n\n\n\n\n\nPI Name\n\n\nPI\n\n\n \n\n\n \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publications.html#publications-and-conference-papers",
    "href": "publications.html#publications-and-conference-papers",
    "title": "Publications",
    "section": "Publications and Conference Papers",
    "text": "Publications and Conference Papers\nKhanal, K., Michelén Ströfer, C. A., Ancellin, M., & Haji, M. (2024). Fully Differentiable Boundary Element Solver for Hydrodynamic Sensitivity Analysis of Wave-Structure Interactions. Applied Ocean Research, Submitted.\nKhanal, K., & Haji, M. N. (2024). Multi-Objective Multidisciplinary Optimization of Wave Energy Converter Array Layout and Controls. https://dx.doi.org/10.2139/ssrn.4891821\nMcCabe, R., Khanal, K., & Haji, M. (2024). Open-source toolbox for semi-analytical hydrodynamic coefficients via the matched eigenfunction expansion method. UMERC Conference, August 7, Duluth, Minnesota.\nKhanal, K., & Haji, M. N. (2022, October 25). Multidisciplinary Design Optimization for Novel Offshore Systems. Presentation at the openMDAO Workshop, NASA Glenn Research Center, Cleveland, Ohio.\nKhanal, K., McCabe, R., & Haji, M. N. (2023). Gradient-Based Design Optimization of Concentric Cylindrical Offshore Structures. Proceedings of the SIAM Conference on Optimization (OP23), May 31, Seattle, Washington.\nKhanal, K., Vitale, O., DeGoede, N., & Haji, M. (2023, October 4-6). Multi-objective Multidisciplinary Optimization of Wave Energy Converter Array Configurations and Controls. University Marine Energy Research Community 2023 Conference, Durham, NH, USA."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html",
    "href": "posts/differentiable-hydrodynamics-framework/index.html",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "",
    "text": "Optimizing the levelized cost of electricity for floating offshore wind turbines (FOWTs) and wave energy parks involves analyzing multiple coupled subsystems including geometry, aerodynamics, and hydrodynamics. In complex engineered systems, the solution of governing equations in one subsystem changes the input for another subsystem. As the saying goes in engineering: “everything influences everything else” (Sobieszczanski-Sobieski and Haftka 1993). This creates design tradeoffs between several subsystems, necessitating an integrated multidisciplinary analysis approach.\nMultidisciplinary Design Optimization (MDO) is a field of engineering that focuses on using numerical optimization and solvers for designing systems involving multiple coupled disciplines or subsystems (Martins and Lambe 2013). Research has shown that sequential optimization of coupled subsystems usually results in sub-optimal designs, while an MDO approach leads to system-optimal solutions (Sobieszczanski-Sobieski and Haftka 1993)."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#introduction",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#introduction",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "",
    "text": "Optimizing the levelized cost of electricity for floating offshore wind turbines (FOWTs) and wave energy parks involves analyzing multiple coupled subsystems including geometry, aerodynamics, and hydrodynamics. In complex engineered systems, the solution of governing equations in one subsystem changes the input for another subsystem. As the saying goes in engineering: “everything influences everything else” (Sobieszczanski-Sobieski and Haftka 1993). This creates design tradeoffs between several subsystems, necessitating an integrated multidisciplinary analysis approach.\nMultidisciplinary Design Optimization (MDO) is a field of engineering that focuses on using numerical optimization and solvers for designing systems involving multiple coupled disciplines or subsystems (Martins and Lambe 2013). Research has shown that sequential optimization of coupled subsystems usually results in sub-optimal designs, while an MDO approach leads to system-optimal solutions (Sobieszczanski-Sobieski and Haftka 1993)."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#motivation-for-a-differentiable-framework",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#motivation-for-a-differentiable-framework",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Motivation for a Differentiable Framework",
    "text": "Motivation for a Differentiable Framework\nOffshore and marine energy systems are inherently complex coupled systems. Currently, no integrated framework exists for offshore structures that supports both hydrodynamic simulation and shape optimization. This represents a significant bottleneck for design studies and optimization efforts. The adoption of MDO-based approaches should be encouraged to increase accessibility for further research (Musial et al. 2020).\nIn multidisciplinary design optimization, changes in one subsystem propagate across other subsystems. For example, a change in the mean position of a floating body alters the waterline and waterplane area, requiring recalculation of hydrodynamic coefficients. Similarly, research on novel multipurpose platforms (Perez-Collazo, Greaves, and Iglesias 2015) would benefit from such a framework.\nThe framework I’m developing is intended to serve as: - A tool for early design studies in the conceptual phase - A plugin for other MDO applications where hydrodynamics analysis is coupled"
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#multidisciplinary-design-optimization",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#multidisciplinary-design-optimization",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Multidisciplinary Design Optimization",
    "text": "Multidisciplinary Design Optimization\n\nHydrodynamic Shape Optimization\nMDO of offshore structures involves shape perturbation and optimization. Different underwater shapes of floating bodies respond differently to incoming ocean waves, making shape optimization crucial for offshore platform design.\nOffshore structures like spar buoys (vertical cylindrical structures) can be reasonably modeled using analytical approximations (Haghi, Sabbagh-Yazdi, and Ghalandari 2014; Morison, Johnson, and Schaaf 1950). However, these analytical approaches are not feasible for non-standard geometries—those obtained after perturbing a base shape, usually described using splines. Efficient shape parameterization and numerical solvers explore the design space much better (Martins and Lambe 2013). In MDO, shapes are typically perturbed to be compatible with other subsystems, with B-splines (CAD geometry) being preferred (Samareh 2001).\nThe response motion of offshore structures is calculated using hydrodynamic coefficients such as added mass and damping. These coefficients characterize the geometry of floating structures. A transfer function called the Response Amplitude Operator (RAO) linearly relates sea motion to floating body motion.\nBoundary Element Methods (BEM) are used to calculate hydrodynamic coefficients, relying on linear potential flow theory where the exact Green’s function and its derivative are known (Babarit and Delhommeau 2011). BEM-based PDE solvers (Babarit 2015) are typically accurate for most geometries and can be coupled for shape optimization within a design framework. Depending on system requirements, we may want to minimize or maximize body response to waves—minimizing motion for wind turbines while maximizing motion for wave energy converters.\n\n\nDifferentiable Hydrodynamics\nCoupling numerical solvers within optimization is computationally costly. Shape optimization with many design variables requires an efficient way to calculate both the response and its gradient. Researchers often rely on reduced-order models to approximate hydrodynamic response and heuristic methods for optimization. However, heuristic methods don’t scale well for large-scale optimization, and reduced-order models lack the accuracy of full simulations.\nGradient-based optimization is preferred for large-scale optimization with many design variables and costly function evaluations. Coupling numerical solvers in gradient-based optimization requires gradients of solver output with respect to all inputs. While this has been implemented for CFD (He et al. 2020), no implementation of differentiable hydrodynamics (differentiable BEM) exists.\nAmong various gradient calculation methods, adjoint-based methods are accurate and efficient for inverse design problems. Adjoint methods are widely used in optimal control and aerodynamic shape optimization (Jameson 1988) as well as design optimization (Giles and Pierce 2000), but haven’t been applied to BEM-based hydrodynamics shape optimization.\n\nUnderstanding Adjoint Methods\nAdjoint methods provide an elegant way to compute gradients of objective functions with respect to many design variables at a computational cost that is essentially independent of the number of design variables. This is particularly valuable for shape optimization problems where we may have hundreds or thousands of design variables.\nThe key insight of adjoint methods is that instead of computing \\(\\frac{\\partial x}{\\partial \\theta}\\) directly (which would require solving the system for each design variable), we solve a single adjoint equation to obtain the sensitivity of the objective function.\nFor our BEM optimization problem:\n\\[\\begin{aligned}\n\\min_{\\theta,x} \\quad & J(S(\\theta), x(\\theta); \\theta ) \\\\\n\\textrm{s.t.} \\quad R(\\theta)=  & K(\\theta)\\times x(\\theta) - B(\\theta) = 0 \\\\\n\\end{aligned}\\]\nThe total derivative of the objective function with respect to design variables is:\n\\[\\frac{dJ}{d\\theta} = \\frac{\\partial J}{\\partial \\theta} + \\frac{\\partial J}{\\partial x}\\frac{\\partial x}{\\partial \\theta}\\]\nUsing the constraint equation \\(R(\\theta) = K(\\theta)x(\\theta) - B(\\theta) = 0\\), we can derive:\n\\[\\frac{\\partial R}{\\partial \\theta} = \\frac{\\partial K}{\\partial \\theta}x + K\\frac{\\partial x}{\\partial \\theta} - \\frac{\\partial B}{\\partial \\theta} = 0\\]\nSolving for \\(\\frac{\\partial x}{\\partial \\theta}\\):\n\\[\\frac{\\partial x}{\\partial \\theta} = K^{-1}\\left(\\frac{\\partial B}{\\partial \\theta} - \\frac{\\partial K}{\\partial \\theta}x\\right)\\]\nSubstituting back into the total derivative:\n\\[\\frac{dJ}{d\\theta} = \\frac{\\partial J}{\\partial \\theta} + \\frac{\\partial J}{\\partial x}K^{-1}\\left(\\frac{\\partial B}{\\partial \\theta} - \\frac{\\partial K}{\\partial \\theta}x\\right)\\]\nThe adjoint variable \\(\\lambda\\) is defined as the solution to:\n\\[K^T\\lambda = \\left(\\frac{\\partial J}{\\partial x}\\right)^T\\]\nThis leads to the elegant expression:\n\\[\\frac{dJ}{d\\theta} = \\frac{\\partial J}{\\partial \\theta} + \\lambda^T\\left(\\frac{\\partial B}{\\partial \\theta} - \\frac{\\partial K}{\\partial \\theta}x\\right)\\]\nComputational advantage: Instead of solving \\(N\\) forward problems (one for each design variable), we solve: 1. One forward problem: \\(Kx = B\\) 2. One adjoint problem: \\(K^T\\lambda = \\left(\\frac{\\partial J}{\\partial x}\\right)^T\\)\nThis gives us gradients with respect to all design variables at the cost of just two linear system solves, regardless of the number of design variables.\n\n\nAutomatic Differentiation in Practice\nAutomatic Differentiation (AD) is a technique that automatically computes derivatives of functions implemented in computer code. Unlike symbolic differentiation (which manipulates mathematical expressions) or finite differences (which approximates derivatives), AD computes exact derivatives by applying the chain rule systematically through the computational graph.\nTwo main modes of AD:\n\nForward Mode AD: Computes directional derivatives by propagating derivatives forward through the computation. For a function \\(f: \\mathbb{R}^n \\rightarrow \\mathbb{R}^m\\), forward mode computes \\(J \\cdot v\\) where \\(J\\) is the Jacobian and \\(v\\) is a direction vector.\nReverse Mode AD: Computes gradients by propagating adjoints backward through the computation. For a scalar function \\(f: \\mathbb{R}^n \\rightarrow \\mathbb{R}\\), reverse mode computes \\(\\nabla f\\) at the cost of approximately 2-4 function evaluations, regardless of \\(n\\).\n\nFor our BEM solver, reverse mode AD is particularly attractive because: - We typically have many design variables (shape parameters) but few objectives - The computational cost is independent of the number of design variables - It naturally computes the adjoint variables needed for our optimization\nImplementation considerations:\n\nLanguage choice: Julia and JAX are excellent choices because they:\n\nSupport automatic differentiation natively\nProvide high-performance numerical computing\nEnable just-in-time compilation for efficiency\nOffer parallel computing capabilities\n\nComputational graph: The BEM solver must be implemented in a way that maintains a differentiable computational graph:\n\nAll operations must be differentiable\nControl flow must be handled carefully\nLinear solvers must be differentiable (or replaced with differentiable alternatives)\n\nMemory considerations: Reverse mode AD requires storing intermediate values for the backward pass, which can be memory-intensive for large problems.\n\n\n\nDiscrete vs. Continuous Adjoint\nContinuous adjoint methods derive adjoint equations from the continuous governing equations (PDEs) before discretization. This approach: - Provides analytical expressions for adjoint equations - May be more efficient for certain problems - Requires careful treatment of boundary conditions - Is problem-specific and requires manual derivation\nDiscrete adjoint methods work with the discretized equations and use automatic differentiation to compute the required derivatives. This approach: - Is more general and applicable to many problems - Automatically handles complex discretization schemes - Requires less manual derivation - Can be less efficient but is more robust\nFor our BEM solver, discrete adjoint with automatic differentiation is preferred because: - It handles the complex Green’s function evaluations automatically - It works with any objective function without manual derivation - It integrates seamlessly with existing optimization frameworks - It provides exact gradients (up to numerical precision)\n\n\nChallenges and Solutions\nChallenge 1: Dense Linear Systems BEM methods solve dense linear systems, which are computationally expensive. Solutions include: - Using iterative solvers with preconditioning - Implementing matrix-free methods where possible - Leveraging parallel computing for large problems\nChallenge 2: Complex-valued Computations Hydrodynamic problems involve complex numbers (frequency domain analysis). AD frameworks must handle complex differentiation correctly: - Using Wirtinger calculus for complex derivatives - Ensuring proper handling of complex conjugates - Maintaining numerical stability\nChallenge 3: Green’s Function Evaluation The free-surface Green’s function is computationally expensive and involves special functions. Solutions include: - Implementing efficient evaluation algorithms - Using approximation methods for early design iterations - Leveraging GPU acceleration where possible\nChallenge 4: Integration with Optimization Frameworks The differentiable BEM solver must integrate with MDO frameworks like OpenMDAO: - Providing consistent interfaces for gradient computation - Handling the coupling between different subsystems - Ensuring numerical stability across the entire optimization"
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#optimization-problem-statement",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#optimization-problem-statement",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Optimization Problem Statement",
    "text": "Optimization Problem Statement\nThe hydrodynamic optimization problem can be expressed in general form as:\n\\[\\begin{aligned}\n\\min_{\\theta,x} \\quad & J(S(\\theta), x(\\theta); \\theta ) \\\\\n\\textrm{s.t.} \\quad R(\\theta)=  & K(\\theta)\\times x(\\theta) - B(\\theta) = 0 \\\\\n\\end{aligned}\\]\nWhere: - \\(x\\) is the state variable vector (e.g., source distribution) - \\(\\theta\\) represents mesh parameters (design variables) - \\((K, S)\\) are influence matrices (complex-valued) from free surface Green’s function evaluation and its derivative - \\(J\\) is the objective function (e.g., Response Amplitude Operator)\nIn this optimization, residuals from dense linear systems are driven to zero iteratively using linear solvers:\n\\[R = K x - B\\]\nWhere \\(K\\) is the square influence matrix between mesh panels (\\(N \\times N\\)), \\(B\\) represents boundary conditions for diffraction and radiation problems, and \\(N\\) is the number of mesh panels. \\(K\\), \\(X\\), and \\(B\\) are explicitly related to mesh parameters \\((\\theta)\\). The objective function thus depends both explicitly and implicitly on mesh parameters \\((\\theta)\\).\nFor multidisciplinary design optimization including hydrodynamic optimization, the number of design variables increases further to account for system objectives and subsystem couplings.\nFor inverse design problems like this, calculating the gradient \\(\\frac{d J}{d\\theta}\\) involves computing \\(\\frac{\\partial B}{\\partial \\theta}\\), \\(\\frac{\\partial K}{\\partial \\theta}\\), \\(\\frac{\\partial x}{\\partial \\theta}\\), and \\(\\frac{\\partial J}{\\partial \\theta}\\)—which is only possible through automatic differentiation of the BEM solver."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#my-research-contribution",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#my-research-contribution",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "My Research Contribution",
    "text": "My Research Contribution\nWhen coupling BEM with other analyses, numerical derivatives such as finite differences can be used (Khanal and Haji 2023). I have already implemented this as the first version of my framework, but it has issues with accuracy and convergence and may not scale well for large numbers of design variables.\nIn contrast, the adjoint method requires only 2 solves of the linear system to obtain accurate gradients with respect to many design variables. A differentiable hydrodynamics solver is required to construct the adjoint equation.\nAdjoint equations to minimize wave resistance of surface ships were derived by Ragab through continuous adjoint formulation (Ragab and Nayfeh 2004). However, this isn’t directly applicable to many offshore structures where different functionals (motions) are optimized. Unlike continuous formulation, discrete adjoint-based derivation using automatic differentiation is applicable to many objectives as long as they’re programmed in a language supporting automatic differentiation (Giles and Pierce 2000).\nMy thesis aims to implement a differentiable multidisciplinary design optimization framework that integrates gradient-based optimization for large-scale offshore systems.\nThe proposed framework will:\n\nImplement a differentiable solver for hydrodynamics analysis\nDerive, implement, and integrate adjoint-based shape optimization for offshore structures\nDemonstrate differentiability and present case studies on optimization of novel offshore systems\n\nCreating a differentiable boundary element method (BEM) solver will enable modern and complex workflows in offshore system design and optimization. Differentiability will allow for novel methods such as adjoint-based multidisciplinary optimization and more accurate data-driven methods such as physics-informed machine learning.\nThese capabilities will significantly reduce the design cycle for early design studies of novel offshore systems.\n\nCoupled Derivatives\nFor multidisciplinary design optimization, Modular Analysis and Unified Derivatives (MAUD) architecture couples derivatives from several subsystems. MAUD formulates the multidisciplinary model as a nonlinear system of equations, leading to a linear equation that unifies all derivative computation methods (Hwang and Martins 2018). Each subsystem can provide numerical or analytical gradients.\nOpenMDAO (Gray et al. 2019), a tool developed by NASA, implements this framework. I plan to integrate newly developed BEM adjoints into this framework. Currently, I integrate BEM in OpenMDAO using numerical derivatives approximated through finite differences (Khanal and Haji 2023). Since this scales linearly with the number of design variables and accuracy deteriorates for nonlinear problems, it’s not appropriate for multidisciplinary analysis and optimization. My thesis aims to solve this problem."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#boundary-element-method",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#boundary-element-method",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Boundary Element Method",
    "text": "Boundary Element Method\nHydrodynamics of floating bodies is typically modeled using linear potential flow theory. Since the domain is unbounded, boundary element methods are used, requiring only boundary discretization—the surface geometry is meshed with quadrilateral panels.\nFor each frequency of ocean waves the structure encounters, diffraction and radiation problems are solved to calculate hydrodynamic coefficients. The solution of velocity potential and radiation/diffraction forces is computed in the frequency domain.\nComputational cost increases with geometry discretization and the number of wave frequencies and headings. Typically, numerical complexity of BEM codes is proportional to \\(O(N^2)\\) or \\(O(N^3)\\) with \\(N\\) as the number of mesh panels. The Green function is computed \\(O(N^2)\\) times to set up the linear system, which is solved either by iterative methods with \\(O(N^2)\\) complexity or Gauss elimination with \\(O(N^3)\\) complexity (Babarit and Delhommeau 2011).\nThis limits integration within optimization loops, especially for large-scale optimization based on heuristic methods. The solution is to minimize function evaluations in optimization. Gradient-based optimization explores design space more efficiently (fewer evaluations) to reach locally optimal points."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#research-phases",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#research-phases",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Research Phases",
    "text": "Research Phases\n\nPhase 1: Discrete Adjoint Implementation\nThe first phase involves deriving and setting up discrete adjoint equations for BEM. We’ll use automatic differentiation to obtain partial sensitivities required in the equation by implementing the BEM method in either Julia or Jax, as they support automatic differentiation in a discretize-then-optimize scheme.\nThese libraries and programming languages support: - Automatic Differentiation (AD) - Parallelism - Just-in-time (JIT) compilation\nGradient calculations need to be performed through the iterative solver employed to solve dense linear systems in BEM methods.\nThis method relies on known exact expressions of Green’s function. Mathematical expressions and numerical methods for free-surface Green’s function of linearized wave-structure problems in deep water and frequency domain are investigated (Xie and Liu 2020). Other methods, such as approximating free-surface Green’s function using deep learning, can also be explored for early design iterations when speed is more important than accuracy.\n\n\nPhase 2: MDO Framework Integration\nThe second phase integrates differentiable BEM into the MDO framework. Extensions could include supporting more accurate physics-informed machine learning (Raissi, Perdikaris, and Karniadakis 2019).\nBEM methods require solving dense linear systems. The re-implementation will use algorithms best suited for dense matrices. A differentiable solver would provide required gradients for optimization and neural network-based approximation. Simulators implemented with automatic differentiation can be used inside machine learning models to construct more accurate reduced-order models (Brunton, Proctor, and Kutz 2020).\n\n\nExpected A-Exam Scope\nI plan to take an A-exam in Spring 2024, presenting the differentiable version of the solver that derives discrete adjoints for the hydrodynamic solver using automatic differentiation in Jax or Julia.\nAn optimization study of simple geometry (such as a compound cylinder) with analytical derivation through eigenfunction expansion will be conducted for gradient verification. Gradients will be compared with finite differences for geometries where analytical gradients are unavailable."
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#tentative-thesis-chapters",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#tentative-thesis-chapters",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Tentative Thesis Chapters",
    "text": "Tentative Thesis Chapters\n\nMultidisciplinary Design Optimization of Offshore Systems - Literature review\nBoundary Element Method for Calculating Hydrodynamic Coefficients\nAdjoint and Automatic Differentiation of BEM Solver\nCase Studies and Applications of a Differentiable Solver"
  },
  {
    "objectID": "posts/differentiable-hydrodynamics-framework/index.html#keywords",
    "href": "posts/differentiable-hydrodynamics-framework/index.html#keywords",
    "title": "A Differentiable Framework for Multidisciplinary Design Optimization of Novel Offshore Systems",
    "section": "Keywords",
    "text": "Keywords\nDifferentiable Hydrodynamics, Multidisciplinary Design Optimization, Automatic Differentiation, Discrete Adjoint Method, Boundary Element Method, Potential Flow, Panel Code\n\nThis research is conducted as part of my PhD in Systems Engineering at Cornell University, under the supervision of Dr. Maha Haji in the Symbiotic Engineering and Analysis Lab."
  },
  {
    "objectID": "teaching.html#multidisciplinary-design-optimization-mdo",
    "href": "teaching.html#multidisciplinary-design-optimization-mdo",
    "title": "Teaching",
    "section": "",
    "text": "Image: CorPower Ocean\n\n\nCourse: Multidisciplinary Design Optimization\nInstitution: Cornell University\nRole: Teaching Assistant\nWhen Offered: Fall Semester\nPrerequisites: Undergraduate linear algebra and knowledge of MATLAB, Python, or R\nCourse Overview: This course presents a rigorous, quantitative multidisciplinary design methodology that incorporates the creative side of the design process. Through a topic of your choice, students learn how to use multidisciplinary design optimization (MDO) to create advanced and complex engineering systems that must be competitive in performance and life-cycle value.\nKey Focus Areas: - Multidisciplinary character of engineering systems - Design of complex systems\n- Tools for optimization\nCourse Structure: Students work in small teams on a term project to apply MDO principles to design and optimize an engineering system of their choice.\n\n\n\n\nStudents who successfully complete this course will be able to:\n\nSystem Decomposition: Subdivide a complex system into smaller disciplinary models, manage their interfaces and reintegrate them into an overall system model.\nAlgorithm Selection: Identify the most suitable optimization algorithm between gradient-based numerical optimization algorithms (i.e., sequential quadratic programming (SQP)) and various modern heuristic optimization techniques (i.e., simulated annealing (SA) or genetic algorithms (GA)) for their design problem and use it to find the optimal design for a single objective of their choice.\nCritical Analysis: Critically evaluate and interpret analysis and optimization results, including sensitivity analysis and exploration of performance, cost and risk tradeoffs.\nMulti-Objective Optimization: Utilize basic concepts of multi-objective optimization, including the conditions for optimality and Pareto front computation techniques, to optimize their design with respect to two objectives of their choice.\nTeam Project: Work as a team to formulate a realistic engineering design problem, optimize the design for a single objective and multiple competing objectives, and present the results in a final oral presentation and written report.\n\n\n\n\nThis course is fundamentally different from most traditional university optimization courses which focus mainly on the mathematics and algorithms for search. The focus is equally strong on all three aspects of the problem:\n\nMultidisciplinary Integration: Understanding how different disciplines (structures, aerodynamics, controls, optics, costing, manufacturing, environmental science, marketing, etc.) must be tightly coupled during conceptual and preliminary design of complex new systems and products.\nSystem Design: Developing the ability to design complex engineering systems that are competitive in performance and life-cycle value.\nOptimization Tools: Mastering both gradient-based and heuristic optimization techniques for real-world engineering applications.\n\n\n\n\n\nProgramming: MATLAB, Python, or R for implementation\nOptimization Algorithms:\n\nGradient-based methods (Sequential Quadratic Programming)\nHeuristic methods (Simulated Annealing, Genetic Algorithms)\n\nMulti-objective Optimization: Pareto front computation and analysis\nSensitivity Analysis: Understanding design parameter impacts\nSystem Integration: Managing multidisciplinary model couplings\n\n\nThis course provides students with practical experience in applying MDO principles to real engineering problems, preparing them for careers in advanced engineering design and optimization."
  },
  {
    "objectID": "posts/gradient-based-optimization/index.html",
    "href": "posts/gradient-based-optimization/index.html",
    "title": "Gradient-Based Optimization for Large Systems",
    "section": "",
    "text": "A computational architecture for Multidisciplinary Design Optimization (MDO) is composed of three primary components: solvers (e.g., Newton), simulators (or emulators, PDE solvers, closed-form expressions), and optimizers (e.g., IPOPT, Genetic Algorithm). The performance and efficiency of the overall system are directly influenced by the selection and interaction of these components.\nSimulators and solvers are required to either compute the performance of the system through some physics (numerical simulation) or resolve non-linear feedback coupling between subsystems (non-linear equation solvers). A system where all the subsystems agree on their input and output (including any shared variables) is necessary for the system to be optimal and feasible. The coordination of the variables can, however, be done in numerous ways that involve solvers and/or optimizers. Many architectures that arise due to these choices are briefly discussed in later sections.\nFor offshore systems, marine hydrodynamics solvers (like the boundary element method) are required. The choice of solvers, however, depends on the strength of the coupling between two subsystems. In this post, a Newton solver is used to converge the feedback coupling when necessary.\n\n\nThe MDO system can be represented as a set:\n\\[F:\\{\\mathcal{O}, \\mathcal{M}, \\mathcal{S}\\}\\]\nwhere \\(\\mathcal{M}\\) is the set of simulators, \\(\\mathcal{O}\\) is the choice of optimizer, and \\(\\mathcal{S}\\) is the set of solvers.\nThe performance \\(\\mathcal{P}(\\mathcal{F})\\) depends on:\n\nThe compatibility of \\(\\mathcal{M}\\) and \\(\\mathcal{S}\\) with \\(\\mathcal{O}\\).\nThe computational efficiency of \\(\\mathcal{F}\\), defined by the time \\(T(\\mathcal{F})\\) and accuracy \\(A(\\mathcal{F})\\).\nThe convergence of the optimization problem.\n\nGradient-based optimizers (\\(\\mathcal{O}_{\\nabla}\\)) achieve superior performance (\\(\\mathcal{P}(\\mathcal{F}_{\\nabla}) &gt; \\mathcal{P}(\\mathcal{F}_{\\neg \\nabla})\\)) when \\(\\mathcal{M}\\) and \\(\\mathcal{S}\\) are differentiable. However, the practical challenges of computing gradients for certain simulators and solvers remain a significant limitation.\n\n\n\nLet \\(\\mathcal{F}\\) represent the multidisciplinary optimization problem, where each problem \\(p \\in \\mathcal{F}\\) is defined by a set of variables (design, shared, target), constraints (including consistency constraints), and objectives (one or many). The optimizer is a function \\(\\mathcal{O}: \\mathcal{F} \\to \\mathcal{R}\\), where \\(\\mathcal{R}\\) is the space of feasible solutions.\nOptimizers commonly used in MDO problems can be broadly categorized into:\n\nGradient-Based Optimizers (\\(\\mathcal{O}_{\\nabla}\\)): These optimizers leverage the gradient \\(\\nabla f\\) of the objective function \\(f\\) to iteratively find a minimum. The preference for gradient-based methods arises from their superior convergence speed when gradients are available and computationally inexpensive. However, obtaining gradients can be challenging:\n\nCertain simulator software \\(S: \\mathcal{X} \\to \\mathcal{Y}\\), where \\(\\mathcal{X}\\) is the input space and \\(\\mathcal{Y}\\) is the output space, may not inherently provide differentiable mappings.\nNumerical approximations such as finite differences (\\(\\nabla f \\approx \\frac{\\Delta f}{\\Delta x}\\)) may introduce errors and computational overhead when differentiating this class of simulators.\n\nGradient-Free Optimizers (\\(\\mathcal{O}_{\\neg \\nabla}\\)): These include evolutionary algorithms and heuristic methods that do not require gradient information. Evolutionary strategies are stochastic and derivative-free. While easier to use and robust for non-differentiable problems (think black-box type problems), they often lack the efficiency of \\(\\mathcal{O}_{\\nabla}\\) for high-dimensional spaces.\n\n\n\n\n\\(\\mathcal{S}\\) is the set of solvers and \\(\\mathcal{M}\\) is the set of simulators needed for the MDO problems. The choices \\(s \\in \\mathcal{S}\\) and \\(m \\in \\mathcal{M}\\) affect the feasibility and convergence of the optimization problem. For instance:\n\nA simulator \\(m\\) that provides closed-form solutions is often preferable for gradient-based methods because of the ease of differentiating symbolic expressions. This, however, often means that a lower-fidelity model of the physics is used.\nA solver \\(s\\) is usually selected for its ability to resolve non-linear coupling. A differentiation of the solver algorithm is not needed; only the derivative at the solution of the solver is needed, which is obtained using implicit differentiation.\n\nA robust and widely adopted method for calculating gradients in numerical code is differentiable programming, where automatic differentiation is commonly used.\nStarting with the PDE of a physical process, many frameworks can be used. If the system includes only one discipline, a relevant simulation or PDE code can be used on its own. If there are multiple disciplines, then either a joint discretization of that PDE (e.g., using FEM) is needed, or a way to couple them together if such a joint discretization is complicated or unavailable. Commercial finite element frameworks (like COMSOL Multiphysics) are robust for many coupled physics problems, such as aero-structural interactions.\nHowever, when there is a need to couple a diverse set of numerical codes—such as a boundary element method or an explicit equation coupled with other disciplines—such unified frameworks are limited. A framework where a heterogeneous set of solvers can be used in a plug-and-play style is highly desirable. This also avoids the need for new discretizations of the coupled problem if the system model has additional subsystems or if the fidelity of a simulation changes. This post advocates to adopt this modular architecture approach where any \\(s \\in \\mathcal{S}\\) can be easily used.\n\n\n\nMultiple fields independently concluded that gradient-based methods scale well and utilized adjoint-based optimization. Backpropagation, as discussed by LeCun et al., shows the connection between optimal control and neural networks and how backpropagating errors scales the training of neural nets.\nDesign optimization in complex engineering systems, from neural networks to physical structures, encounters two principal challenges:\n\nLarge Number of Design Variables: These systems involve numerous “knobs” to tune—such as weights and biases in neural networks or geometric and material properties in physical systems.\nHigh Computational Cost: The computation required to evaluate these systems often lacks scalability, creating a bottleneck.\n\n\n\n\nNeural Networks: The core computation involves evaluating affine transformations followed by nonlinear activation functions. These operations must be performed billions of times during training. The sheer volume of operations makes scaling these systems challenging, despite the simplicity of individual computations.\nPhysical Systems: Optimizing systems like airplanes or offshore wind turbines introduces a different complexity. These designs involve thousands of variables, each influencing coupled physics simulations (CFD, structural mechanics, etc.). Each simulation is computationally expensive, making the design process resource-intensive.\n\nTo overcome these challenges, reviewing the literature from both fields reveals that adjoint-based methods are widely utilized. However, each discipline has optimized gradient computation to suit its specific tasks. In machine learning, computational graphs are a common framework for implementing backpropagation using dynamic programming and the chain rule. In MDO, the same objective is achieved by solving a linear system, where backpropagation can be viewed as a special case that employs linear solvers to solve that system efficiently. The work of LeCun, Hwang, and Martins and others has helped unify these approaches, showing how various methods like automatic differentiation (AD) and adjoint methods can be derived from a single cohesive formulation by viewing any system as a non-linear system and utilizing the implicit function theorem.\nIn this post, I discussed how two different fields, machine learning and MDO, have converged on the same approach to scale the system optimization using gradients."
  },
  {
    "objectID": "posts/gradient-based-optimization/index.html#multidisciplinary-design-optimization-architecture",
    "href": "posts/gradient-based-optimization/index.html#multidisciplinary-design-optimization-architecture",
    "title": "Gradient-Based Optimization for Large Systems",
    "section": "",
    "text": "A computational architecture for Multidisciplinary Design Optimization (MDO) is composed of three primary components: solvers (e.g., Newton), simulators (or emulators, PDE solvers, closed-form expressions), and optimizers (e.g., IPOPT, Genetic Algorithm). The performance and efficiency of the overall system are directly influenced by the selection and interaction of these components.\nSimulators and solvers are required to either compute the performance of the system through some physics (numerical simulation) or resolve non-linear feedback coupling between subsystems (non-linear equation solvers). A system where all the subsystems agree on their input and output (including any shared variables) is necessary for the system to be optimal and feasible. The coordination of the variables can, however, be done in numerous ways that involve solvers and/or optimizers. Many architectures that arise due to these choices are briefly discussed in later sections.\nFor offshore systems, marine hydrodynamics solvers (like the boundary element method) are required. The choice of solvers, however, depends on the strength of the coupling between two subsystems. In this post, a Newton solver is used to converge the feedback coupling when necessary.\n\n\nThe MDO system can be represented as a set:\n\\[F:\\{\\mathcal{O}, \\mathcal{M}, \\mathcal{S}\\}\\]\nwhere \\(\\mathcal{M}\\) is the set of simulators, \\(\\mathcal{O}\\) is the choice of optimizer, and \\(\\mathcal{S}\\) is the set of solvers.\nThe performance \\(\\mathcal{P}(\\mathcal{F})\\) depends on:\n\nThe compatibility of \\(\\mathcal{M}\\) and \\(\\mathcal{S}\\) with \\(\\mathcal{O}\\).\nThe computational efficiency of \\(\\mathcal{F}\\), defined by the time \\(T(\\mathcal{F})\\) and accuracy \\(A(\\mathcal{F})\\).\nThe convergence of the optimization problem.\n\nGradient-based optimizers (\\(\\mathcal{O}_{\\nabla}\\)) achieve superior performance (\\(\\mathcal{P}(\\mathcal{F}_{\\nabla}) &gt; \\mathcal{P}(\\mathcal{F}_{\\neg \\nabla})\\)) when \\(\\mathcal{M}\\) and \\(\\mathcal{S}\\) are differentiable. However, the practical challenges of computing gradients for certain simulators and solvers remain a significant limitation.\n\n\n\nLet \\(\\mathcal{F}\\) represent the multidisciplinary optimization problem, where each problem \\(p \\in \\mathcal{F}\\) is defined by a set of variables (design, shared, target), constraints (including consistency constraints), and objectives (one or many). The optimizer is a function \\(\\mathcal{O}: \\mathcal{F} \\to \\mathcal{R}\\), where \\(\\mathcal{R}\\) is the space of feasible solutions.\nOptimizers commonly used in MDO problems can be broadly categorized into:\n\nGradient-Based Optimizers (\\(\\mathcal{O}_{\\nabla}\\)): These optimizers leverage the gradient \\(\\nabla f\\) of the objective function \\(f\\) to iteratively find a minimum. The preference for gradient-based methods arises from their superior convergence speed when gradients are available and computationally inexpensive. However, obtaining gradients can be challenging:\n\nCertain simulator software \\(S: \\mathcal{X} \\to \\mathcal{Y}\\), where \\(\\mathcal{X}\\) is the input space and \\(\\mathcal{Y}\\) is the output space, may not inherently provide differentiable mappings.\nNumerical approximations such as finite differences (\\(\\nabla f \\approx \\frac{\\Delta f}{\\Delta x}\\)) may introduce errors and computational overhead when differentiating this class of simulators.\n\nGradient-Free Optimizers (\\(\\mathcal{O}_{\\neg \\nabla}\\)): These include evolutionary algorithms and heuristic methods that do not require gradient information. Evolutionary strategies are stochastic and derivative-free. While easier to use and robust for non-differentiable problems (think black-box type problems), they often lack the efficiency of \\(\\mathcal{O}_{\\nabla}\\) for high-dimensional spaces.\n\n\n\n\n\\(\\mathcal{S}\\) is the set of solvers and \\(\\mathcal{M}\\) is the set of simulators needed for the MDO problems. The choices \\(s \\in \\mathcal{S}\\) and \\(m \\in \\mathcal{M}\\) affect the feasibility and convergence of the optimization problem. For instance:\n\nA simulator \\(m\\) that provides closed-form solutions is often preferable for gradient-based methods because of the ease of differentiating symbolic expressions. This, however, often means that a lower-fidelity model of the physics is used.\nA solver \\(s\\) is usually selected for its ability to resolve non-linear coupling. A differentiation of the solver algorithm is not needed; only the derivative at the solution of the solver is needed, which is obtained using implicit differentiation.\n\nA robust and widely adopted method for calculating gradients in numerical code is differentiable programming, where automatic differentiation is commonly used.\nStarting with the PDE of a physical process, many frameworks can be used. If the system includes only one discipline, a relevant simulation or PDE code can be used on its own. If there are multiple disciplines, then either a joint discretization of that PDE (e.g., using FEM) is needed, or a way to couple them together if such a joint discretization is complicated or unavailable. Commercial finite element frameworks (like COMSOL Multiphysics) are robust for many coupled physics problems, such as aero-structural interactions.\nHowever, when there is a need to couple a diverse set of numerical codes—such as a boundary element method or an explicit equation coupled with other disciplines—such unified frameworks are limited. A framework where a heterogeneous set of solvers can be used in a plug-and-play style is highly desirable. This also avoids the need for new discretizations of the coupled problem if the system model has additional subsystems or if the fidelity of a simulation changes. This post advocates to adopt this modular architecture approach where any \\(s \\in \\mathcal{S}\\) can be easily used.\n\n\n\nMultiple fields independently concluded that gradient-based methods scale well and utilized adjoint-based optimization. Backpropagation, as discussed by LeCun et al., shows the connection between optimal control and neural networks and how backpropagating errors scales the training of neural nets.\nDesign optimization in complex engineering systems, from neural networks to physical structures, encounters two principal challenges:\n\nLarge Number of Design Variables: These systems involve numerous “knobs” to tune—such as weights and biases in neural networks or geometric and material properties in physical systems.\nHigh Computational Cost: The computation required to evaluate these systems often lacks scalability, creating a bottleneck.\n\n\n\n\nNeural Networks: The core computation involves evaluating affine transformations followed by nonlinear activation functions. These operations must be performed billions of times during training. The sheer volume of operations makes scaling these systems challenging, despite the simplicity of individual computations.\nPhysical Systems: Optimizing systems like airplanes or offshore wind turbines introduces a different complexity. These designs involve thousands of variables, each influencing coupled physics simulations (CFD, structural mechanics, etc.). Each simulation is computationally expensive, making the design process resource-intensive.\n\nTo overcome these challenges, reviewing the literature from both fields reveals that adjoint-based methods are widely utilized. However, each discipline has optimized gradient computation to suit its specific tasks. In machine learning, computational graphs are a common framework for implementing backpropagation using dynamic programming and the chain rule. In MDO, the same objective is achieved by solving a linear system, where backpropagation can be viewed as a special case that employs linear solvers to solve that system efficiently. The work of LeCun, Hwang, and Martins and others has helped unify these approaches, showing how various methods like automatic differentiation (AD) and adjoint methods can be derived from a single cohesive formulation by viewing any system as a non-linear system and utilizing the implicit function theorem.\nIn this post, I discussed how two different fields, machine learning and MDO, have converged on the same approach to scale the system optimization using gradients."
  }
]